{
    "Pod": {
        "prefix": ["k8sPod", "kube.pod"],
        "description": "Pod",
        "body": [
            "apiVersion: v1",
            "kind: Pod",
            "metadata:",
            "  name: \"${1:MYAPP}\"",
            "  namespace: default",
            "  labels:",
            "    app: \"${1:MYAPP}\"",
            "spec:",
            "  containers:",
            "  - name: ${1:MYAPP}",
            "    image: \"${2:debian-slim}:${3:latest}\"",
            "    resources:",
            "      limits:",
            "        cpu: 200m",
            "        memory: 500Mi",
            "      requests:",
            "        cpu: 100m",
            "        memory: 200Mi",
            "    env:",
            "    - name: DB_HOST",
            "      valueFrom:",
            "        configMapKeyRef:",
            "          name: MYAPP",
            "          key: DB_HOST",
            "    ports:",
            "    - containerPort:  80",
            "      name:  http",
            "    volumeMounts:",
            "    - name: localtime",
            "      mountPath: /etc/localtime",
            "  volumes:",
            "    - name: localtime",
            "      hostPath:",
            "        path: /usr/share/zoneinfo/Asia/Shanghai",
            "  restartPolicy: Always"
        ]
    },
    "Deployment": {
        "prefix": ["k8sDeployment", "kube.deploy", "kube.deployment"],
        "description": "Deploymment",
        "body": [
            "apiVersion: apps/v1",
            "kind: Deployment",
            "metadata:",
            "  name:  ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app:  ${1:MYAPP}",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  replicas: 1",
            "  strategy:",
            "    rollingUpdate:",
            "      maxSurge: 25%",
            "      maxUnavailable: 25%",
            "    type: RollingUpdate",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app:  ${1:MYAPP}",
            "    spec:",
            "      # initContainers:",
            "        # Init containers are exactly like regular containers, except:",
            "          # - Init containers always run to completion.",
            "          # - Each init container must complete successfully before the next one starts.",
            "      containers:",
            "      - name:  ${1:MYAPP}",
            "        image:  ${2:MYAPP:latest}",
            "        resources:",
            "          requests:",
            "            cpu: 100m",
            "            memory: 100Mi",
            "          limits:",
            "            cpu: 100m",
            "            memory: 100Mi",
            "        livenessProbe:",
            "          tcpSocket:",
            "            port: ${3:80}",
            "          initialDelaySeconds: 5",
            "          timeoutSeconds: 5",
            "          successThreshold: 1",
            "          failureThreshold: 3",
            "          periodSeconds: 10",
            "        readinessProbe:",
            "          httpGet:",
            "            path: /_status/healthz",
            "            port: ${3:80}",
            "          initialDelaySeconds: 5",
            "          timeoutSeconds: 2",
            "          successThreshold: 1",
            "          failureThreshold: 3",
            "          periodSeconds: 10",
            "        env:",
            "        - name: DB_HOST",
            "          valueFrom:",
            "            configMapKeyRef:",
            "              name: ${1:MYAPP}",
            "              key: DB_HOST",
            "        ports:",
            "        - containerPort:  ${3:80}",
            "          name:  ${1:MYAPP}",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "        - name: localtime",
            "          hostPath:",
            "            path: /usr/share/zoneinfo/Asia/Shanghai",
            "      restartPolicy: Always"
        ]
    },
    "DaemonSet": {
        "prefix": ["k8sDaemonSet", "kube.ds", "kube.daemonset"],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: DaemonSet",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      tolerations:",
            "      # this toleration is to have the daemonset runnable on master nodes",
            "      # remove it if your masters can't run pods",
            "      - key: node-role.kubernetes.io/master",
            "        effect: NoSchedule",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: ${2:debian}",
            "        resources:",
            "          limits:",
            "            memory: 200Mi",
            "          requests:",
            "            cpu: 100m",
            "            memory: 200Mi",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      terminationGracePeriodSeconds: 30",
            "      volumes:",
            "      - name: localtime",
            "        hostPath:",
            "          path: /usr/share/zoneinfo/Asia/Shanghai"      
        ]
    },
    "StatefulSet": {
        "prefix": ["k8sStatefulSet", "kube.statefulset"],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: StatefulSet",
            "metadata:",
            "  name: ${1:nginx}",
            "  namespace: default",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:nginx} # has to match .spec.template.metadata.labels",
            "  serviceName: \"${1:nginx}\"",
            "  replicas: 3 # by default is 1",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:nginx} # has to match .spec.selector.matchLabels",
            "    spec:",
            "      terminationGracePeriodSeconds: 10",
            "      containers:",
            "      - name: ${1:nginx}",
            "        image: ${1:nginx}-slim:1.16.1",
            "        ports:",
            "        - containerPort: 80",
            "          name: web",
            "        volumeMounts:",
            "        - name: www",
            "          mountPath: /usr/share/nginx/html",
            "  volumeClaimTemplates:",
            "  - metadata:",
            "      name: www",
            "    spec:",
            "      accessModes: [ \"ReadWriteOnce\" ]",
            "      storageClassName: \"my-storage-class\"",
            "      resources:",
            "        requests:",
            "          storage: 1Gi"
        ]
    },
    "Job": {
        "prefix": ["k8sJob", "kube.job"],
        "description": "",
        "body": [
            "apiVersion: batch/v1",
            "kind: Job",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  template:",
            "    metadata:",
            "      name: ${1:MYAPP}",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: python:3.7.6-alpine3.10",
            "        command: ['sh', '-c', 'python3 manage.py makemigrations && python3 manage.py migrate']",
            "        env:",
            "        - name: ENV_NAME",
            "          value: ENV_VALUE",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "      - name: localtime",
            "        hostPath:",
            "          path: /usr/share/zoneinfo/Asia/Shanghai",
            "      restartPolicy: OnFailure",
            "      dnsPolicy: ClusterFirst"
        ]
    },
    "CronJob": {
        "prefix": ["k8sCronJob", "kube.cronjob"],
        "description": "",
        "body": [
            "apiVersion: batch/v1beta1",
            "kind: CronJob",
            "metadata:",
            "  name: hello",
            "  namespace: default",
            "spec:",
            "  schedule: \"*/1 * * * *\"",
            "  jobTemplate:",
            "    spec:",
            "      template:",
            "        spec:",
            "          containers:",
            "          - name: hello",
            "            image: busybox",
            "            args: ['/bin/sh', '-c', 'date; echo Hello from the Kubernetes cluster']",
            "          restartPolicy: OnFailure"
        ]
    },
    "ReplicaSet": {
        "prefix": ["k8sReplicaSet", "kube_rs", "kube_replicaset"],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: ReplicaSet",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  # modify replicas according to your case",
            "  replicas: ${2:3}",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: ${3:nginx/nginx}",
            "        ports:",
            "        - name: web",
            "          containerPort:  80",
            "          protocol: TCP",
            "        env:",
            "        - name: NGX_VERSION",
            "          value: 1.16.1",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "        - name: localtime",
            "          hostPath:",
            "            path: /usr/share/zoneinfo/Asia/Shanghai"
        ]
    }
}